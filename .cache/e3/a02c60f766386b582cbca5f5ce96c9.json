{"id":"../node_modules/nearlib/lib/signer.js","dependencies":[{"name":"/Users/peterdepaulo/Developer/NEAR/introverse/package.json","includedInParent":true,"mtime":1580583219365},{"name":"/Users/peterdepaulo/Developer/NEAR/introverse/node_modules/nearlib/package.json","includedInParent":true,"mtime":1580513502445},{"name":"js-sha256","loc":{"line":6,"column":44},"parent":"/Users/peterdepaulo/Developer/NEAR/introverse/node_modules/nearlib/lib/signer.js","resolved":"/Users/peterdepaulo/Developer/NEAR/introverse/node_modules/js-sha256/src/sha256.js"},{"name":"./utils/key_pair","loc":{"line":7,"column":27},"parent":"/Users/peterdepaulo/Developer/NEAR/introverse/node_modules/nearlib/lib/signer.js","resolved":"/Users/peterdepaulo/Developer/NEAR/introverse/node_modules/nearlib/lib/utils/key_pair.js"}],"generated":{"js":"'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n    /**\n     * Signs given message, by first hashing with sha256.\n     * @param message message to sign.\n     * @param accountId accountId to use for signing.\n     * @param networkId network for this accontId.\n     */\n    async signMessage(message, accountId, networkId) {\n        return this.signHash(new Uint8Array(js_sha256_1.default.sha256.array(message)), accountId, networkId);\n    }\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    async signHash(hash, accountId, networkId) {\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/nearlib/lib/signer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"../node_modules/nearlib/lib/signer.js":"'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n    /**\n     * Signs given message, by first hashing with sha256.\n     * @param message message to sign.\n     * @param accountId accountId to use for signing.\n     * @param networkId network for this accontId.\n     */\n    async signMessage(message, accountId, networkId) {\n        return this.signHash(new Uint8Array(js_sha256_1.default.sha256.array(message)), accountId, networkId);\n    }\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    async signHash(hash, accountId, networkId) {\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"},"lineCount":55}},"error":null,"hash":"56fbded6c50908868cc94cfb6e17a167","cacheData":{"env":{}}}